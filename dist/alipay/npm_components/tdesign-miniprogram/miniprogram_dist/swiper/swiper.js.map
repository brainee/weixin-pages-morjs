{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/swiper/swiper.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/swiper/swiper.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n        r = Reflect.decorate(decorators, target, key, desc);\n    else\n        for (var i = decorators.length - 1; i >= 0; i--)\n            if (d = decorators[i])\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nconst { prefix } = config;\nconst name = `${prefix}-swiper`;\nlet Swiper = class Swiper extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-nav`,\n            `${prefix}-class-image`,\n            `${prefix}-class-prev-image`,\n            `${prefix}-class-next-image`,\n        ];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.properties = props;\n        this.observers = {\n            navCurrent(v) {\n                this.updateNav(v);\n            },\n        };\n        this.$nav = null;\n        this.relations = {\n            '../swiper-nav/swiper-nav': {\n                type: 'child',\n            },\n        };\n        this.data = {\n            prefix,\n            classPrefix: name,\n        };\n        this.lifetimes = {\n            ready() {\n                const { current } = this.properties;\n                this.setData({ navCurrent: current });\n            },\n        };\n        this.methods = {\n            updateNav(currentValue) {\n                var _a;\n                if (this.data.navigation)\n                    return;\n                const $nav = (_a = this.getRelationNodes('./swiper-nav')) === null || _a === void 0 ? void 0 : _a[0];\n                if (!$nav)\n                    return;\n                const { direction, paginationPosition, list } = this.properties;\n                $nav.setData({\n                    current: currentValue,\n                    total: list.length,\n                    direction,\n                    paginationPosition,\n                });\n            },\n            onTap(e) {\n                const { index } = e.currentTarget.dataset;\n                this.triggerEvent('click', { index });\n            },\n            onChange(e) {\n                const { current, source } = e.detail;\n                this.setData({\n                    navCurrent: current,\n                });\n                this.triggerEvent('change', { current, source });\n            },\n            onNavBtnChange(e) {\n                const { dir, source } = e.detail;\n                this.doNavBtnChange(dir, source);\n            },\n            doNavBtnChange(dir, source) {\n                const { current, list, loop } = this.data;\n                const count = list.length;\n                let nextPos = dir === 'next' ? current + 1 : current - 1;\n                if (loop) {\n                    nextPos = dir === 'next' ? (current + 1) % count : (current - 1 + count) % count;\n                }\n                else {\n                    nextPos = nextPos < 0 || nextPos >= count ? current : nextPos;\n                }\n                if (nextPos === current)\n                    return;\n                this.setData({\n                    current: nextPos,\n                });\n                this.triggerEvent('change', { current: nextPos, source });\n            },\n            onImageLoad(e) {\n                this.triggerEvent('image-load', { index: e.target.dataset.custom });\n            },\n        };\n    }\n};\nSwiper = __decorate([\n    wxComponent()\n], Swiper);\nexport default Swiper;\n"],"names":[],"sourceRoot":""}