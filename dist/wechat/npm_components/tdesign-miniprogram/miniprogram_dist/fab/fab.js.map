{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/fab/fab.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/fab/fab.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nconst systemInfo = wx.getSystemInfoSync();\nconst { prefix } = config;\nconst name = `${prefix}-fab`;\nconst baseButtonProps = {\n    size: 'large',\n    shape: 'circle',\n    theme: 'primary',\n    externalClass: `${prefix}-fab__button`,\n};\nlet Fab = class Fab extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.properties = props;\n        this.externalClasses = [`class`, `${prefix}-class`, `${prefix}-class-button`];\n        this.data = {\n            prefix,\n            classPrefix: name,\n            buttonData: baseButtonProps,\n            moveStyle: null,\n        };\n        this.observers = {\n            'buttonProps.**, icon, text, ariaLabel'() {\n                this.setData({\n                    buttonData: Object.assign(Object.assign(Object.assign(Object.assign({}, baseButtonProps), { shape: this.properties.text ? 'round' : 'circle', icon: this.properties.icon }), this.properties.buttonProps), { content: this.properties.text, ariaLabel: this.properties.ariaLabel }),\n                }, this.computedSize);\n            },\n        };\n        this.methods = {\n            onTplButtonTap(e) {\n                this.triggerEvent('click', e);\n            },\n            onMove(e) {\n                const { x, y, rect } = e.detail;\n                const maxX = systemInfo.windowWidth - rect.width;\n                const maxY = systemInfo.windowHeight - rect.height;\n                const right = Math.max(0, Math.min(x, maxX));\n                const bottom = Math.max(0, Math.min(y, maxY));\n                this.setData({\n                    moveStyle: `right: ${right}px; bottom: ${bottom}px;`,\n                });\n            },\n            computedSize() {\n                if (!this.properties.draggable)\n                    return;\n                const insChild = this.selectComponent('#draggable');\n                insChild.computedRect();\n            },\n        };\n    }\n};\nFab = __decorate([\n    wxComponent()\n], Fab);\nexport default Fab;\n"],"names":[],"sourceRoot":""}