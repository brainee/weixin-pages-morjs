{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/cascader/cascader.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/cascader/cascader.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getRect } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-cascader`;\nlet Cascader = class Cascader extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [`${prefix}-class`];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.properties = props;\n        this.controlledProps = [\n            {\n                key: 'value',\n                event: 'change',\n            },\n        ];\n        this.data = {\n            prefix,\n            name,\n            stepIndex: 0,\n            selectedIndexes: [],\n            selectedValue: [],\n            scrollTopList: [],\n            steps: [],\n        };\n        this.observers = {\n            visible(v) {\n                if (v) {\n                    const $tabs = this.selectComponent('#tabs');\n                    $tabs === null || $tabs === void 0 ? void 0 : $tabs.setTrack();\n                    this.updateScrollTop();\n                    this.initWithValue();\n                }\n            },\n            value() {\n                this.initWithValue();\n            },\n            'selectedIndexes, options'() {\n                var _a, _b, _c, _d;\n                const { options, selectedIndexes, keys, placeholder } = this.data;\n                const selectedValue = [];\n                const steps = [];\n                const items = [options];\n                if (options.length > 0) {\n                    for (let i = 0, size = selectedIndexes.length; i < size; i += 1) {\n                        const index = selectedIndexes[i];\n                        const next = items[i][index];\n                        selectedValue.push(next[(_a = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _a !== void 0 ? _a : 'value']);\n                        steps.push(next[(_b = keys === null || keys === void 0 ? void 0 : keys.label) !== null && _b !== void 0 ? _b : 'label']);\n                        if (next[(_c = keys === null || keys === void 0 ? void 0 : keys.children) !== null && _c !== void 0 ? _c : 'children']) {\n                            items.push(next[(_d = keys === null || keys === void 0 ? void 0 : keys.children) !== null && _d !== void 0 ? _d : 'children']);\n                        }\n                    }\n                }\n                if (steps.length < items.length) {\n                    steps.push(placeholder);\n                }\n                this.setData({\n                    steps,\n                    items,\n                    selectedValue,\n                    stepIndex: items.length - 1,\n                });\n            },\n            stepIndex() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    const { visible } = this.data;\n                    if (visible) {\n                        this.updateScrollTop();\n                    }\n                });\n            },\n        };\n        this.methods = {\n            initWithValue() {\n                if (this.data.value != null && this.data.value !== '') {\n                    const selectedIndexes = this.getIndexesByValue(this.data.options, this.data.value);\n                    if (selectedIndexes) {\n                        this.setData({ selectedIndexes });\n                    }\n                }\n                else {\n                    this.setData({ selectedIndexes: [] });\n                }\n            },\n            getIndexesByValue(options, value) {\n                var _a, _b, _c;\n                const { keys } = this.data;\n                for (let i = 0, size = options.length; i < size; i += 1) {\n                    const opt = options[i];\n                    if (opt[(_a = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _a !== void 0 ? _a : 'value'] === value) {\n                        return [i];\n                    }\n                    if (opt[(_b = keys === null || keys === void 0 ? void 0 : keys.children) !== null && _b !== void 0 ? _b : 'children']) {\n                        const res = this.getIndexesByValue(opt[(_c = keys === null || keys === void 0 ? void 0 : keys.children) !== null && _c !== void 0 ? _c : 'children'], value);\n                        if (res) {\n                            return [i, ...res];\n                        }\n                    }\n                }\n            },\n            updateScrollTop() {\n                const { visible, items, selectedIndexes, stepIndex } = this.data;\n                if (visible) {\n                    getRect(this, '.cascader-radio-group-0').then((rect) => {\n                        var _a;\n                        const eachRadioHeight = rect.height / ((_a = items[0]) === null || _a === void 0 ? void 0 : _a.length);\n                        this.setData({\n                            [`scrollTopList[${stepIndex}]`]: eachRadioHeight * selectedIndexes[stepIndex],\n                        });\n                    });\n                }\n            },\n            hide(trigger) {\n                this.setData({ visible: false });\n                this.triggerEvent('close', { trigger: trigger });\n            },\n            onVisibleChange() {\n                this.hide('overlay');\n            },\n            onClose() {\n                this.hide('close-btn');\n            },\n            onStepClick(e) {\n                const { index } = e.currentTarget.dataset;\n                this.setData({ stepIndex: index });\n            },\n            onTabChange(e) {\n                const { value } = e.detail;\n                this.setData({\n                    stepIndex: value,\n                });\n            },\n            handleSelect(e) {\n                var _a, _b, _c;\n                const { level } = e.target.dataset;\n                const { value } = e.detail;\n                const { selectedIndexes, items, keys } = this.data;\n                const index = items[level].findIndex((item) => { var _a; return item[(_a = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _a !== void 0 ? _a : 'value'] === value; });\n                const item = items[level][index];\n                if (item.disabled) {\n                    return;\n                }\n                selectedIndexes[level] = index;\n                selectedIndexes.length = level + 1;\n                this.triggerEvent('pick', { value: item[(_a = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _a !== void 0 ? _a : 'value'], index, level });\n                if ((_c = item === null || item === void 0 ? void 0 : item[(_b = keys === null || keys === void 0 ? void 0 : keys.children) !== null && _b !== void 0 ? _b : 'children']) === null || _c === void 0 ? void 0 : _c.length) {\n                    this.setData({ selectedIndexes });\n                }\n                else {\n                    this.setData({ selectedIndexes }, () => {\n                        var _a;\n                        const { items } = this.data;\n                        this._trigger('change', {\n                            value: item[(_a = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _a !== void 0 ? _a : 'value'],\n                            selectedOptions: items.map((item, index) => item[selectedIndexes[index]]),\n                        });\n                    });\n                    this.hide('finish');\n                }\n            },\n        };\n    }\n};\nCascader = __decorate([\n    wxComponent()\n], Cascader);\nexport default Cascader;\n"],"names":[],"sourceRoot":""}