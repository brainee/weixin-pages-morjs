{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/picker/picker.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/picker/picker.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nconst { prefix } = config;\nconst name = `${prefix}-picker`;\nlet Picker = class Picker extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.properties = props;\n        this.externalClasses = [`${prefix}-class`, `${prefix}-class-confirm`, `${prefix}-class-cancel`, `${prefix}-class-title`];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.relations = {\n            '../picker-item/picker-item': {\n                type: 'child',\n                linked() {\n                    this.updateChildren();\n                },\n            },\n        };\n        this.observers = {\n            'value, visible'() {\n                this.updateChildren();\n            },\n            keys(obj) {\n                this.setData({\n                    labelAlias: (obj === null || obj === void 0 ? void 0 : obj.label) || 'label',\n                    valueAlias: (obj === null || obj === void 0 ? void 0 : obj.value) || 'value',\n                });\n            },\n        };\n        this.data = {\n            prefix,\n            classPrefix: name,\n            labelAlias: 'label',\n            valueAlias: 'value',\n            defaultPopUpProps: {},\n            defaultPopUpzIndex: 11500,\n        };\n        this.methods = {\n            updateChildren() {\n                const { value, defaultValue } = this.properties;\n                this.$children.forEach((child, index) => {\n                    var _a, _b;\n                    child.setData({\n                        value: (_b = (_a = value === null || value === void 0 ? void 0 : value[index]) !== null && _a !== void 0 ? _a : defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue[index]) !== null && _b !== void 0 ? _b : '',\n                        columnIndex: index,\n                    });\n                    child.update();\n                });\n            },\n            getSelectedValue() {\n                const value = this.$children.map((item) => item._selectedValue);\n                const label = this.$children.map((item) => item._selectedLabel);\n                return [value, label];\n            },\n            getColumnIndexes() {\n                const columns = this.$children.map((pickerColumn, columnIndex) => {\n                    return {\n                        column: columnIndex,\n                        index: pickerColumn._selectedIndex,\n                    };\n                });\n                return columns;\n            },\n            onConfirm() {\n                const [value, label] = this.getSelectedValue();\n                const columns = this.getColumnIndexes();\n                this.close('confirm-btn');\n                this.triggerEvent('change', { value, label, columns });\n                this.triggerEvent('confirm', { value, label, columns });\n            },\n            triggerColumnChange({ column, index }) {\n                const [value, label] = this.getSelectedValue();\n                this.triggerEvent('pick', { value, label, column, index });\n            },\n            onCancel() {\n                this.close('cancel-btn');\n                this.triggerEvent('cancel');\n            },\n            onPopupChange(e) {\n                const { visible } = e.detail;\n                this.close('overlay');\n                this.triggerEvent('visible-change', { visible });\n            },\n            close(trigger) {\n                if (this.data.autoClose) {\n                    this.setData({ visible: false });\n                }\n                this.triggerEvent('close', { trigger });\n            },\n        };\n    }\n    ready() {\n        this.$children.map((column, index) => (column.columnIndex = index));\n    }\n};\nPicker = __decorate([\n    wxComponent()\n], Picker);\nexport default Picker;\n"],"names":[],"sourceRoot":""}