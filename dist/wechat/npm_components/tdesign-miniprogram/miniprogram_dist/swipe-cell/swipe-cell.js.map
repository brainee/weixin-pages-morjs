{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/swipe-cell/swipe-cell.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/swipe-cell/swipe-cell.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getRect } from '../common/utils';\nimport { getObserver } from '../common/wechat';\nlet ARRAY = [];\nconst { prefix } = config;\nconst name = `${prefix}-swipe-cell`;\nconst ContainerClass = `.${name}`;\nlet SwiperCell = class SwiperCell extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.externalClasses = [`${prefix}-class`];\n        this.options = {\n            multipleSlots: true,\n        };\n        this.properties = props;\n        this.data = {\n            prefix,\n            wrapperStyle: '',\n            closed: true,\n            classPrefix: name,\n        };\n        this.observers = {\n            'left, right'() {\n                this.setSwipeWidth();\n            },\n        };\n        this.lifetimes = {\n            attached() {\n                ARRAY.push(this);\n            },\n            ready() {\n                this.setSwipeWidth();\n            },\n            detached() {\n                ARRAY = ARRAY.filter((item) => item !== this);\n            },\n        };\n    }\n    setSwipeWidth() {\n        Promise.all([getRect(this, `${ContainerClass}__left`), getRect(this, `${ContainerClass}__right`)]).then(([leftRect, rightRect]) => {\n            if (leftRect.width === 0 && rightRect.width === 0 && !this._hasObserved) {\n                this._hasObserved = true;\n                getObserver(this, `.${name}`).then(() => {\n                    this.setSwipeWidth();\n                });\n            }\n            this.setData({\n                leftWidth: leftRect.width,\n                rightWidth: rightRect.width,\n            });\n        });\n    }\n    open() {\n        this.setData({ opened: true });\n    }\n    close() {\n        this.setData({ opened: false });\n    }\n    closeOther() {\n        ARRAY.filter((item) => item !== this).forEach((item) => item.close());\n    }\n    onTap() {\n        this.close();\n    }\n    onActionTap(event) {\n        const { currentTarget: { dataset: { action }, }, } = event;\n        this.triggerEvent('click', action);\n    }\n};\nSwiperCell = __decorate([\n    wxComponent()\n], SwiperCell);\nexport default SwiperCell;\n"],"names":[],"sourceRoot":""}