{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/textarea/textarea.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/textarea/textarea.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getCharacterLength } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-textarea`;\nlet Textarea = class Textarea extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.options = {\n            multipleSlots: true,\n        };\n        this.behaviors = ['wx://form-field'];\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-textarea`,\n            `${prefix}-class-label`,\n            `${prefix}-class-indicator`,\n        ];\n        this.properties = props;\n        this.data = {\n            prefix,\n            classPrefix: name,\n            count: 0,\n        };\n        this.observers = {\n            value(val) {\n                this.updateCount(val);\n            },\n        };\n        this.lifetimes = {\n            ready() {\n                const { value } = this.properties;\n                this.updateValue(value == null ? '' : value);\n            },\n        };\n        this.methods = {\n            updateCount(val) {\n                const { maxcharacter, maxlength } = this.properties;\n                const { count } = this.calculateValue(val, maxcharacter, maxlength);\n                this.setData({\n                    count,\n                });\n            },\n            updateValue(val) {\n                const { maxcharacter, maxlength } = this.properties;\n                const { value, count } = this.calculateValue(val, maxcharacter, maxlength);\n                this.setData({\n                    value,\n                    count,\n                });\n            },\n            calculateValue(value, maxcharacter, maxlength) {\n                if (maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n                    const { length, characters } = getCharacterLength('maxcharacter', value, maxcharacter);\n                    return {\n                        value: characters,\n                        count: length,\n                    };\n                }\n                if (maxlength > 0 && !Number.isNaN(maxlength)) {\n                    const { length, characters } = getCharacterLength('maxlength', value, maxlength);\n                    return {\n                        value: characters,\n                        count: length,\n                    };\n                }\n                return {\n                    value,\n                    count: value ? String(value).length : 0,\n                };\n            },\n            onInput(event) {\n                const { value, cursor } = event.detail;\n                this.updateValue(value);\n                this.triggerEvent('change', { value: this.data.value, cursor });\n            },\n            onFocus(event) {\n                this.triggerEvent('focus', Object.assign({}, event.detail));\n            },\n            onBlur(event) {\n                this.triggerEvent('blur', Object.assign({}, event.detail));\n            },\n            onConfirm(event) {\n                this.triggerEvent('enter', Object.assign({}, event.detail));\n            },\n            onLineChange(event) {\n                this.triggerEvent('line-change', Object.assign({}, event.detail));\n            },\n            onKeyboardHeightChange(e) {\n                this.triggerEvent('keyboardheightchange', e.detail);\n            },\n        };\n    }\n};\nTextarea = __decorate([\n    wxComponent()\n], Textarea);\nexport default Textarea;\n"],"names":[],"sourceRoot":""}