{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/input/input.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/input/input.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getCharacterLength, calcIcon, isDef } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-input`;\nlet Input = class Input extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.options = {\n            multipleSlots: true,\n        };\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-prefix-icon`,\n            `${prefix}-class-label`,\n            `${prefix}-class-input`,\n            `${prefix}-class-clearable`,\n            `${prefix}-class-suffix`,\n            `${prefix}-class-suffix-icon`,\n            `${prefix}-class-tips`,\n        ];\n        this.behaviors = ['wx://form-field'];\n        this.properties = props;\n        this.data = {\n            prefix,\n            classPrefix: name,\n            classBasePrefix: prefix,\n            showClearIcon: true,\n        };\n        this.lifetimes = {\n            ready() {\n                const { value } = this.properties;\n                this.updateValue(value !== null && value !== void 0 ? value : '');\n            },\n        };\n        this.observers = {\n            prefixIcon(v) {\n                this.setData({\n                    _prefixIcon: calcIcon(v),\n                });\n            },\n            suffixIcon(v) {\n                this.setData({\n                    _suffixIcon: calcIcon(v),\n                });\n            },\n            clearable(v) {\n                this.setData({\n                    _clearIcon: calcIcon(v, 'close-circle-filled'),\n                });\n            },\n            clearTrigger() {\n                this.updateClearIconVisible();\n            },\n        };\n        this.methods = {\n            updateValue(value) {\n                const { maxcharacter, maxlength } = this.properties;\n                if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n                    const { length, characters } = getCharacterLength('maxcharacter', value, maxcharacter);\n                    this.setData({\n                        value: characters,\n                        count: length,\n                    });\n                }\n                else if (maxlength && maxlength > 0 && !Number.isNaN(maxlength)) {\n                    const { length, characters } = getCharacterLength('maxlength', value, maxlength);\n                    this.setData({\n                        value: characters,\n                        count: length,\n                    });\n                }\n                else {\n                    this.setData({\n                        value,\n                        count: isDef(value) ? String(value).length : 0,\n                    });\n                }\n            },\n            updateClearIconVisible(value = false) {\n                const { clearTrigger } = this.properties;\n                this.setData({ showClearIcon: value || clearTrigger === 'always' });\n            },\n            onInput(e) {\n                const { value, cursor, keyCode } = e.detail;\n                this.updateValue(value);\n                this.triggerEvent('change', { value: this.data.value, cursor, keyCode });\n            },\n            onFocus(e) {\n                this.updateClearIconVisible(true);\n                this.triggerEvent('focus', e.detail);\n            },\n            onBlur(e) {\n                this.updateClearIconVisible();\n                this.triggerEvent('blur', e.detail);\n            },\n            onConfirm(e) {\n                this.triggerEvent('enter', e.detail);\n            },\n            onSuffixClick() {\n                this.triggerEvent('click', { trigger: 'suffix' });\n            },\n            onSuffixIconClick() {\n                this.triggerEvent('click', { trigger: 'suffix-icon' });\n            },\n            clearInput(e) {\n                this.triggerEvent('clear', e.detail);\n                this.setData({ value: '' });\n            },\n            onKeyboardHeightChange(e) {\n                this.triggerEvent('keyboardheightchange', e.detail);\n            },\n            onNickNameReview(e) {\n                this.triggerEvent('nicknamereview', e.detail);\n            },\n        };\n    }\n};\nInput = __decorate([\n    wxComponent()\n], Input);\nexport default Input;\n"],"names":[],"sourceRoot":""}