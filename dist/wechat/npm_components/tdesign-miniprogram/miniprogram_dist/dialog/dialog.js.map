{"version":3,"file":"npm_components/tdesign-miniprogram/miniprogram_dist/dialog/dialog.js","mappingssources":["webpack:///../node_modules/tdesign-miniprogram/miniprogram_dist/dialog/dialog.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { isObject, toCamel } from '../common/utils';\nconst { prefix } = config;\nconst name = `${prefix}-dialog`;\nlet Dialog = class Dialog extends SuperComponent {\n    constructor() {\n        super(...arguments);\n        this.options = {\n            multipleSlots: true,\n            addGlobalClass: true,\n        };\n        this.externalClasses = [\n            `${prefix}-class`,\n            `${prefix}-class-content`,\n            `${prefix}-class-confirm`,\n            `${prefix}-class-cancel`,\n            `${prefix}-class-action`,\n        ];\n        this.properties = props;\n        this.data = {\n            prefix,\n            classPrefix: name,\n            buttonVariant: 'text',\n        };\n        this.observers = {\n            'confirmBtn, cancelBtn'(confirm, cancel) {\n                const { prefix, classPrefix, buttonLayout } = this.data;\n                const rect = { buttonVariant: 'text' };\n                const useBaseVariant = [confirm, cancel].some((item) => isObject(item) && item.variant && item.variant !== 'text');\n                const buttonMap = { confirm, cancel };\n                const cls = [`${classPrefix}__button`];\n                const externalCls = [];\n                if (useBaseVariant) {\n                    rect.buttonVariant = 'base';\n                    cls.push(`${classPrefix}__button--${buttonLayout}`);\n                }\n                else {\n                    cls.push(`${classPrefix}__button--text`);\n                    externalCls.push(`${classPrefix}-button`);\n                }\n                Object.keys(buttonMap).forEach((key) => {\n                    const btn = buttonMap[key];\n                    const base = {\n                        block: true,\n                        class: [...cls, `${classPrefix}__button--${key}`],\n                        externalClass: [...externalCls, `${prefix}-class-${key}`],\n                        variant: rect.buttonVariant,\n                    };\n                    if (key === 'cancel' && rect.buttonVariant === 'base') {\n                        base.theme = 'light';\n                    }\n                    if (typeof btn === 'string') {\n                        rect[`_${key}`] = Object.assign(Object.assign({}, base), { content: btn });\n                    }\n                    else if (btn && typeof btn === 'object') {\n                        rect[`_${key}`] = Object.assign(Object.assign({}, base), btn);\n                    }\n                    else {\n                        rect[`_${key}`] = null;\n                    }\n                });\n                this.setData(Object.assign({}, rect));\n            },\n        };\n        this.methods = {\n            onTplButtonTap(e) {\n                var _a, _b, _c;\n                const evtType = e.type;\n                const { type, extra } = e.target.dataset;\n                const button = this.data[`_${type}`];\n                const cbName = `bind${evtType}`;\n                if (type === 'action') {\n                    this.onActionTap(extra);\n                    return;\n                }\n                if (typeof button[cbName] === 'function') {\n                    const closeFlag = button[cbName](e);\n                    if (closeFlag) {\n                        this.close();\n                    }\n                }\n                const hasOpenType = 'openType' in button;\n                if (!hasOpenType && ['confirm', 'cancel'].includes(type)) {\n                    (_a = this[toCamel(`on-${type}`)]) === null || _a === void 0 ? void 0 : _a.call(this, type);\n                }\n                if (evtType !== 'tap') {\n                    const success = ((_c = (_b = e.detail) === null || _b === void 0 ? void 0 : _b.errMsg) === null || _c === void 0 ? void 0 : _c.indexOf('ok')) > -1;\n                    this.triggerEvent(success ? 'open-type-event' : 'open-type-error-event', e.detail);\n                }\n            },\n            onConfirm() {\n                this.triggerEvent('confirm');\n                if (this._onConfirm) {\n                    this._onConfirm();\n                    this.close();\n                }\n            },\n            onCancel() {\n                this.triggerEvent('close', { trigger: 'cancel' });\n                this.triggerEvent('cancel');\n                if (this._onCancel) {\n                    this._onCancel();\n                    this.close();\n                }\n            },\n            onClose() {\n                this.triggerEvent('close', { trigger: 'close-btn' });\n                this.close();\n            },\n            close() {\n                this.setData({ visible: false });\n            },\n            overlayClick() {\n                if (this.properties.closeOnOverlayClick) {\n                    this.triggerEvent('close', { trigger: 'overlay' });\n                }\n                this.triggerEvent('overlay-click');\n            },\n            onActionTap(index) {\n                this.triggerEvent('action', { index });\n                if (this._onAction) {\n                    this._onAction({ index });\n                    this.close();\n                }\n            },\n            openValueCBHandle(e) {\n                this.triggerEvent('open-type-event', e.detail);\n            },\n            openValueErrCBHandle(e) {\n                this.triggerEvent('open-type-error-event', e.detail);\n            },\n        };\n    }\n};\nDialog = __decorate([\n    wxComponent()\n], Dialog);\nexport default Dialog;\n"],"names":[],"sourceRoot":""}