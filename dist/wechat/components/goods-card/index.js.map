{"version":3,"file":"components/goods-card/index.js","mappingssources":["webpack:///./components/goods-card/index.js"],"sourcesContent":["\"use strict\";\nimport { __assign } from \"tslib\";\nComponent({\n    options: {\n        addGlobalClass: true,\n    },\n    properties: {\n        id: {\n            type: String,\n            value: '',\n            observer: function (id) {\n                var _a;\n                this.genIndependentID(id);\n                if ((_a = this.properties.thresholds) === null || _a === void 0 ? void 0 : _a.length) {\n                    this.createIntersectionObserverHandle();\n                }\n            },\n        },\n        data: {\n            type: Object,\n            observer: function (data) {\n                if (!data) {\n                    return;\n                }\n                var isValidityLinePrice = true;\n                if (data.originPrice && data.price && data.originPrice < data.price) {\n                    isValidityLinePrice = false;\n                }\n                this.setData({ goods: data, isValidityLinePrice: isValidityLinePrice });\n            },\n        },\n        currency: {\n            type: String,\n            value: 'Â¥',\n        },\n        thresholds: {\n            type: Array,\n            value: [],\n            observer: function (thresholds) {\n                if (thresholds && thresholds.length) {\n                    this.createIntersectionObserverHandle();\n                }\n                else {\n                    this.clearIntersectionObserverHandle();\n                }\n            },\n        },\n    },\n    data: {\n        independentID: '',\n        goods: { id: '' },\n        isValidityLinePrice: false,\n    },\n    lifetimes: {\n        ready: function () {\n            this.init();\n        },\n        detached: function () {\n            this.clear();\n        },\n    },\n    pageLifeTimes: {},\n    methods: {\n        clickHandle: function () {\n            this.triggerEvent('click', { goods: this.data.goods });\n        },\n        clickThumbHandle: function () {\n            this.triggerEvent('thumb', { goods: this.data.goods });\n        },\n        addCartHandle: function (e) {\n            var id = e.currentTarget.id;\n            var cardID = e.currentTarget.dataset.id;\n            this.triggerEvent('add-cart', __assign(__assign({}, e.detail), { id: id, cardID: cardID, goods: this.data.goods }));\n        },\n        genIndependentID: function (id) {\n            var independentID;\n            if (id) {\n                independentID = id;\n            }\n            else {\n                independentID = \"goods-card-\" + ~~(Math.random() * Math.pow(10, 8));\n            }\n            this.setData({ independentID: independentID });\n        },\n        init: function () {\n            var _a = this.properties, thresholds = _a.thresholds, id = _a.id;\n            this.genIndependentID(id);\n            if (thresholds && thresholds.length) {\n                this.createIntersectionObserverHandle();\n            }\n        },\n        clear: function () {\n            this.clearIntersectionObserverHandle();\n        },\n        intersectionObserverContext: null,\n        createIntersectionObserverHandle: function () {\n            var _this = this;\n            if (this.intersectionObserverContext || !this.data.independentID) {\n                return;\n            }\n            this.intersectionObserverContext = this.createIntersectionObserver({\n                thresholds: this.properties.thresholds,\n            }).relativeToViewport();\n            this.intersectionObserverContext.observe(\"#\" + this.data.independentID, function (res) {\n                _this.intersectionObserverCB(res);\n            });\n        },\n        intersectionObserverCB: function () {\n            this.triggerEvent('ob', {\n                goods: this.data.goods,\n                context: this.intersectionObserverContext,\n            });\n        },\n        clearIntersectionObserverHandle: function () {\n            if (this.intersectionObserverContext) {\n                try {\n                    this.intersectionObserverContext.disconnect();\n                }\n                catch (e) { }\n                this.intersectionObserverContext = null;\n            }\n        },\n    },\n});\n"],"names":[],"sourceRoot":""}